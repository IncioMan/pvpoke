// JavaScript Document

var InterfaceMaster = (function () {
    var instance;

    function createInstance() {

        var object = new interfaceObject();

		function interfaceObject(){

			var self = this;
			var data;
			var gm = GameMaster.getInstance();
			var jumpToPoke = false;
			var limitedPokemon = [];
			var context = "rankings"; // Used for internal reference
			var battle = new Battle();
			var customRankingInterface;
			var metaGroup = [];
			var metaGroupData = [];
			var csv = '';
			var showMoveCounts = false;
			var rankingDisplayInterval;
			var numberAskedQuestions = 0;
			var numberCorrectAnswers = 0;

			// Show move counts if previously set
			if(window.localStorage.getItem("rankingsShowMoveCounts") == "true"){
				$(".check.move-counts").addClass("on");
				$(".quiz-container").toggleClass("show-move-counts");
				showMoveCounts = true;
			}

			// The scenario generated by the rankings,
			// This really should be embedded in the ranking data but this is a quick fix for now
			var scenario = {
				slug: "custom",
				shields: [1,1],
				energy: [0,0]
			};

			var scenarios = [];

			this.context = "rankings"; // Used for external reference

			this.init = function(){
				scenarios = GameMaster.getInstance().data.rankingScenarios;

				if(! get){
					this.displayRankings("overall","1500","all");
				} else{
					this.loadGetData();
				}

				$(".format-select").on("change", selectFormat);
				$(".league-select").on("change", selectLeague);
				$(".category-select").on("change", selectCategory);
				$("body").on("click", ".quiz-check-btn", checkAnswer);
				$("body").on("click", ".check", checkBox);

				pokeSearch.setBattle(battle);

				window.addEventListener('popstate', function(e) {
					get = e.state;
					self.loadGetData();
				});
			};

			// Grabs ranking data from the Game Master

			this.displayRankings = function(category, league, cup){

				var gm = GameMaster.getInstance();

				clearInterval(rankingDisplayInterval);
				$(".quiz-container").html('');
				$(".loading").show();

				var format = gm.getFormat(cup, league);

				if(format && format.rules){
					$("a.format-rules").show();
				} else{
					$("a.format-rules").hide();
				}

				// Force 1500 if not general

				if((cup == "premier")&&(league == 1500)){
					league = 10000;

					$(".league-select option[value=\"10000\"]").prop("selected","selected");
				}

				if((cup == "classic")&&(league != 10000)){
					league = 10000;

					$(".league-select option[value=\"10000\"]").prop("selected","selected");
				}

				if(cup == "little"){
					league = 500;

					$(".league-select option[value=\"500\"]").prop("selected","selected");
				}

				if(cup == "littlejungle"){
					$(".little-jungle").show();
				} else{
					$(".little-jungle").hide();
				}

				battle.setCup(cup);
				battle.setCP(league);

				if(! battle.getCup().levelCap){
					battle.setLevelCap(50);
				}

				if(battle.getCup().link){
					$(".description.link").show();
					$(".description.link a").attr("href", battle.getCup().link);
					$(".description.link a").html(battle.getCup().link);
				} else{
					$(".description.link").hide();
				}

				// Check ranking details settings to show ranking details in one page or tabs

				if(settings.rankingDetails == "tabs"){
					$(".quiz-container").addClass("detail-tabs-on");
				}

				/* This timeout allows the interface to display the loading message before
				being thrown into the data loading loop */

				setTimeout(function(){
					gm.loadRankingData(self, category, league, cup);
				}, 50);

			}

			// Displays the grabbed data. Showoff.

			this.displayRankingData = function(rankings){

				var gm = GameMaster.getInstance();

				data = rankings;
				this.rankings = rankings;

				// Load meta group
				if(context != "custom"){
					var metaKey = $(".format-select option:selected").attr("meta-group");

					if(! gm.groups[metaKey]){
						runningResults = true;
						gm.loadGroupData(self, metaKey, data);
						return false;
					} else{
						metaGroupData = gm.groups[metaKey];
					}
				}

				// Sort rankings by selected sort method
				var sort = $(".category-select option:selected").attr("sort");

				switch(sort){
					case "score":
						data.sort((a,b) => (a.score > b.score) ? -1 : ((b.score > a.score) ? 1 : 0));
						$(".league-select-container > .ranking-header.right").html("Score");
						break;

					case "statproduct":
						data.sort((a,b) => (a.stats.product > b.stats.product) ? -1 : ((b.stats.product > a.stats.product) ? 1 : 0));
						$(".league-select-container > .ranking-header.right").html("Stat Product");
						break;

					case "attack":
						data.sort((a,b) => (a.stats.atk > b.stats.atk) ? -1 : ((b.stats.atk > a.stats.atk) ? 1 : 0));
						$(".league-select-container > .ranking-header.right").html("Attack");
						break;

					case "defense":
						data.sort((a,b) => (a.stats.def > b.stats.def) ? -1 : ((b.stats.def > a.stats.def) ? 1 : 0));
						$(".league-select-container > .ranking-header.right").html("Defense");
						break;

					case "stamina":
						data.sort((a,b) => (a.stats.hp > b.stats.hp) ? -1 : ((b.stats.hp > a.stats.hp) ? 1 : 0));
						$(".league-select-container > .ranking-header.right").html("Stamina");
						break;
				}

				// Pass this along to the custom ranking interface to fill in movesets
				if(context == "custom"){
					customRankingInterface.importMovesetsFromRankings(data);
				}

				// Show any restrictions
				var cup = battle.getCup().name;
				$(".limited").hide();
				limitedPokemon = [];

				if((gm.getCupById(cup))&&(gm.getCupById(cup).restrictedPokemon)){
					$(".limited").show();
					$(".check.limited").addClass("on");

					limitedPokemon = gm.getCupById(cup).restrictedPokemon;
				}

				if(battle.getCup().slots){
					$(".continentals").show();
				} else{
					$(".continentals").hide();
				}

				$(".section.white > .quiz-container").html('');

				// Initialize csv data

				csv = 'Pokemon,Score,Dex,Type 1,Type 2,Attack,Defense,Stamina,Stat Product,Level,CP,Fast Move,Charged Move 1,Charged Move 2,Charged Move 1 Count,Charged Move 2 Count,Buddy Distance,Charged Move Cost\n';


				// Create an element for each ranked Pokemon

				metaGroup = [];


				$(".loading").hide();

				var i = 0;
				var rankingDisplayIncrement = 15;

				if(settings.performanceMode){
					rankingDisplayIncrement = 5;
				}

				// FIXME 20 Ã¨ hardcodato
				this.quiz_ranking_index = Math.floor(Math.random() * 20);
				// Mostra solo il primo elemento della lista rankings
				try {
					self.displayRankingEntry(rankings[this.quiz_ranking_index], this.quiz_ranking_index);
				} catch (err) {
					console.error(rankings[this.quiz_ranking_index].speciesId + " could not be displayed", err);
				}


				// Poi chiama la funzione finale
				self.completeRankingDisplay();
				self.numberAskedQuestions++
			}

			this.displayRankingEntry = function(r, index){
				var pokemon = new Pokemon(r.speciesId, 0, battle);
				this.pokemon = pokemon;
				console.log('showing pokemon:', pokemon)

				pokemon.initialize(true);
				pokemon.selectMove("fast", r.moveset[0]);
				pokemon.selectMove("charged", r.moveset[1], 0);

				if(r.moveset.length > 2){
					pokemon.selectMove("charged", r.moveset[2],1);
				} else{
					pokemon.selectMove("charged", "none", 1);
				}

				if(! pokemon.speciesId){
					return;
				}

				// Store the selected moves
				this.fastMove = pokemon.fastMove
				// Select which charged move to quiz out of the two reccomended
				chargedMoveIndex = Math.floor(Math.random() * 2);
				this.chargedMove = pokemon.chargedMoves[chargedMoveIndex]

				// Show the pokemon details
				var $el = $("<div class=\"rank typed-ranking quiz " + pokemon.types[0] + "\" type-1=\""+pokemon.types[0]+"\" type-2=\""+pokemon.types[1]+"\" data=\""+pokemon.speciesId+"\">" +
					"<div class=\"pokemon-info\">" +
						"<div class=\"name-container\">" +
							"<span class=\"number\">#"+(index+1)+"</span>" +
							"<span class=\"name\">"+pokemon.speciesName+"</span>" +
							"<div class=\"quiz-moves-container\">" +
								"<div class=\"quiz-move\"><b>Fast Move:</b> "+ this.fastMove.name + "</div>" +
								"<div class=\"quiz-move\"><b>Charged Move:</b> " + this.chargedMove.name + "</div>" +
							"</div>" +
						"</div>" +
						"<div class=\"type-container\"></div>" +
					"</div>" +
				"</div>");

				for(var i = 0; i < pokemon.types.length; i++){
					var typeStr = pokemon.types[i].charAt(0).toUpperCase() + pokemon.types[i].slice(1);
					if(pokemon.types[i] != "none"){
						$el.find(".type-container").append("<div class=\"type-info "+pokemon.types[i]+"\">"+typeStr+"</div>");
					}
				}

				if(pokemon.needsXLCandy()){
					$el.attr("needs-xls", "true");
					$el.find(".name").append("<span class=\"xl-info-icon\"></span>");
				}

				$(".section.white > .quiz-container").append($el);

				addHintMoveDetails()
			}

			this.completeRankingDisplay = function(){
				//when the data is loaded, show the question
				$(".quiz-question").show();
				$(".quiz-check-btn ").show();
			}

			// Given JSON of get parameters, load these settings

			this.loadGetData = function(){

				if(! get){
					return false;
				}

				// Cycle through parameters and set them

				for(var key in get){
					if(get.hasOwnProperty(key)){

						var val = get[key];

						// Process each type of parameter

						switch(key){

							// Don't process default values so data doesn't needlessly reload

							case "cp":
								battle.setCP(val);
								break;

							case "cat":
								// Select by sort first if it exists
								if($(".category-select option[sort=\""+val+"\"]").length > 0){
									$(".category-select option[sort=\""+val+"\"]").first().prop("selected", "selected");
								} else{
									$(".category-select option[value=\""+val+"\"]").first().prop("selected", "selected");
								}

								// Show relevant description

								var category = $(".category-select option:selected").val();
								var sort = $(".category-select option:selected").attr("sort");

								$(".description").hide();
								if(sort == "score"){
									$(".description."+category).show();
								} else{
									$(".description."+sort).show();
								}
								break;

							case "cup":
								battle.setCup(val);
								break;

							case "p":
								// We have to wait for the data to load before we can jump to a Pokemon, so store this for later
								jumpToPoke = val;
								break;

						}
					}
				}

				// Load data via existing change function

				var cp = battle.getCP();
				var category = $(".category-select option:selected").val();
				var cup = battle.getCup().name;

				$(".format-select option[value=\""+cp+"\"][cup=\""+cup+"\"]").prop("selected","selected");

				self.displayRankings(category, cp, cup, null);
			}

			// When the view state changes, push to browser history so it can be navigated forward or back

			this.pushHistoryState = function(cup, cp, category, speciesId){
				if(context == "custom"){
					return false;
				}

				if(cup == "little"){
					cp = 500;
				}

				// Use the sort method for the non-score based categories
				var sort = $(".category-select option:selected").attr("sort");

				if(sort != "score"){
					category = sort;
				}

				var rankStr = "rankings/"+cup+"/"+cp+"/"+category+"/"

				if(speciesId){
					rankStr += speciesId+"/";
				}

				var url = webRoot+rankStr;

				var data = {cup: cup, cp: cp, cat: category, p: speciesId };

				window.history.pushState(data, "Rankings", url);

				// Send Google Analytics pageview
				gtag('event', 'Lookup', {
				  'category': 'Rankings',
				  'speciesId' : speciesId
				});

				gtag('event', 'page_view', {
				  page_title: speciesId + ' ' + document.title,
				  page_location: (host+rankStr),
				  pageview_type: 'virtual'
				});

				// Set document title
				let selectedFormat = gm.getFormat(cup, cp);

				if(selectedFormat){
					document.title = selectedFormat.title + " Rankings | PvPoke";
				} else{
					document.title = "Rankings | PvPoke";
				}
			}

			function addHintMoveDetails(){
				// Display move data
				var pokemon = self.pokemon
				fastMove = self.fastMove
				chargedMove = self.chargedMove

				var $details = $(".quiz-hints-container");
				// Clear previous content
				$details.empty();
				// Append details template
				$details.append($(".details-template.hide").html());

				var $moveDetails = $details.find(".moveset.fast .move-detail-template.hide").clone();
				$moveDetails.removeClass("hide");

				// Contextualize the move archetype for this Pokemon
				var archetype = fastMove.archetype;
				var archetypeClass = 'general'; // For CSS

				if(fastMove.archetype == "Fast Charge"){
					archetypeClass = "spam";
				} else if(fastMove.archetype == "Heavy Damage"){
					archetypeClass = "nuke";
				} else if(fastMove.archetype == "Multipurpose"){
					archetypeClass = "high-energy";
				} else if(fastMove.archetype == "Low Quality"){
					archetypeClass = "low-quality";
				}

				$moveDetails.addClass(fastMove.type);
				$moveDetails.find(".name").html(fastMove.displayName);
				$moveDetails.find(".archetype .name").html(archetype);
				$moveDetails.find(".archetype .icon").addClass(archetypeClass);
				$moveDetails.find(".dpt .value").html(Math.round( ((fastMove.power * fastMove.stab * pokemon.shadowAtkMult) / (fastMove.cooldown / 500)) * 100) / 100);
				$moveDetails.find(".ept .value").html(Math.round( (fastMove.energyGain / (fastMove.cooldown / 500)) * 100) / 100);
				$moveDetails.find(".turns .value").html( fastMove.cooldown / 500 );
				$moveDetails.attr("data", fastMove.moveId);

				// Highlight this move if it's in the recommended moveset

				if(fastMove == pokemon.fastMove){
					$moveDetails.addClass("selected");
				}

				$details.find(".moveset.fast").append($moveDetails);

				// Display charged moves
				var $moveDetails = $details.find(".moveset.charged .move-detail-template.hide").clone();
				$moveDetails.removeClass("hide");

				// Contextualize the move archetype for this Pokemon
				var archetype = chargedMove.archetype;
				var archetypeClass = 'general'; // For CSS

				if(chargedMove.stab == 1){
					var descriptor = "Coverage";

					if(chargedMove.type == "normal"){
						descriptor = "Neutral"
					}

					switch(archetype){
						case "General":
							archetype = descriptor;
							break;

						case "High Energy":
							if(descriptor == "Coverage"){
								archetype = "High Energy Coverage";
							}
							break;

						case "Spam/Bait":
							archetype = descriptor + " Spam/Bait";
							break;

						case "Nuke":
							archetype = descriptor + " Nuke";
							break;

					}
				}

				if(chargedMove.archetype.indexOf("Boost") > -1){
					archetypeClass = "boost";
				} else if(chargedMove.archetype.indexOf("Self-Debuff") > -1){
					archetypeClass = "self-debuff";
				} else if(chargedMove.archetype.indexOf("Spam") > -1){
					archetypeClass = "spam";
				} else if(chargedMove.archetype.indexOf("High Energy") > -1){
					archetypeClass = "high-energy";
				} else if(chargedMove.archetype.indexOf("Nuke") > -1){
					archetypeClass = "nuke";
				} else if(chargedMove.archetype.indexOf("Debuff") > -1){
					archetypeClass = "debuff";
				}

				if(chargedMove.archetype == "Debuff Spam/Bait"){
					archetypeClass = "debuff";
				}

				$moveDetails.addClass(chargedMove.type);
				$moveDetails.find(".name").html(chargedMove.displayName);
				$moveDetails.find(".archetype .name").html(archetype);
				$moveDetails.find(".archetype .icon").addClass(archetypeClass);
				$moveDetails.find(".damage .value").html(Math.round((chargedMove.power * chargedMove.stab * pokemon.shadowAtkMult) * 100) / 100);
				$moveDetails.find(".energy .value").html(chargedMove.energy);
				$moveDetails.find(".dpe .value").html( Math.round( ((chargedMove.power * chargedMove.stab * pokemon.shadowAtkMult) / chargedMove.energy) * 100) / 100);
				$moveDetails.attr("data", chargedMove.moveId);

				if(chargedMove.buffs && chargedMove.buffApplyChance){
					$moveDetails.find(".move-effect").html(gm.getStatusEffectString(chargedMove));
				}

				//FIXME Add move counts, lo lasciamo?
				//var moveCounts = Pokemon.calculateMoveCounts(pokemon.fastMove, chargedMove);
				//$moveDetails.find(".move-count span").html(moveCounts[0] + " - " + moveCounts[1] + " - " + moveCounts[2] + " - " + moveCounts[3]);

				$details.find(".moveset.charged").append($moveDetails);
			}

			// Set a context so this interface can add or skip functionality

			this.setContext = function(value){
				context = value;

				if(context == "custom"){
					$(".league-select option[value='500']").show();
				}
			}

			// Set a ranking scenario to be displayed

			this.setScenario = function(value){
				scenario = value;
			}

			// Link the custom ranking interface so these two can talk

			this.setCustomRankingInterface = function(obj){
				customRankingInterface = obj;
			}

			// Return a custom group of the top 100 Pokemon

			this.getMetaGroup = function(){
				return metaGroup;
			}

			// Event handler for changing the league select

			function selectLeague(e){
				var cp = battle.getCP();
				var levelCap = parseInt($(".league-select option:selected").attr("level-cap"));

				if(context != "custom"){
					var category = $(".category-select option:selected").val();
					var cup = battle.getCup().name;

					if(cp == 500){
						$(".format-select option[cup=\"little\"]").prop("selected","selected");
						cup = "little";
					} else if(cup == "little"){
						$(".format-select option[cup=\"all\"]").prop("selected","selected");
						cup = "all";
					}

					battle.setCup(cup);

					self.displayRankings(category, cp, cup);
					self.pushHistoryState(cup, cp, category, null);
				} else{
					cp = $(".league-select option:selected").val();
				}

				battle.setCP(cp);
				battle.setLevelCap(levelCap);
			}

			// Event handler for changing the cup select

			function selectFormat(e){
				var cp = $(".format-select option:selected").val();
				var cup = $(".format-select option:selected").attr("cup");
				var category = $(".category-select option:selected").val();
				var sort = $(".category-select option:selected").attr("sort");

				if(! category){
					category = "overall";
				}

				if(cup == "custom"){
					window.location.href = webRoot+'custom-rankings/';
					return;
				}

				self.displayRankings(category, cp, cup);
				self.pushHistoryState(cup, cp, category, null);
			}

			function checkAnswer(e) {
				var quizAnswerInputValue = $(".quiz-answer-input option:selected").val();
				var numberOfMoves = Pokemon.calculateMoveCounts(self.pokemon.fastMove, self.pokemon.chargedMoves[0]);
				console.log(numberOfMoves)
				if(quizAnswerInputValue == numberOfMoves[0]){
					console.log('Correct')
					self.numberCorrectAnswers++
					self.displayRankingData(self.rankings)
				} else {
					console.log('Wrong')
				}
			}

			// Event handler for selecting ranking category

			function selectCategory(e){

				var cp = $(".format-select option:selected").val();
				var category = $(".category-select option:selected").val();
				var sort = $(".category-select option:selected").attr("sort");
				var scenarioStr = $(".category-select option:selected").attr("scenario");
				var cup = $(".format-select option:selected").attr("cup");

				$(".description").hide();
				if(sort == "score"){
					$(".description."+category).show();
				} else{
					$(".description."+sort).show();
				}

				// Set the corresponding scenario

				for(var i = 0; i < scenarios.length; i++){
					if(scenarios[i].slug == scenarioStr){
						scenario = scenarios[i];
						break;
					}
				}

				self.displayRankings(category, cp, cup);

				self.pushHistoryState(cup, cp, category, null);
			}

			// Turn checkboxes on and off

			function checkBox(e){
				$(this).toggleClass("on");
				$(this).trigger("stateChange");
			}

			// Toggle the limited Pokemon from the Rankings

			function toggleLimitedPokemon(e){
				for(var i = 0; i < limitedPokemon.length; i++){
					$(".rank[data='"+limitedPokemon[i]+"']").toggleClass("hide");
					$(".rank[data='"+limitedPokemon[i]+"_shadow']").toggleClass("hide");
				}
			}

			// Show or hide cup slots

			function toggleSlots(e){
				var selectedSlots = [];
				var cup = battle.getCup();

				if(! cup?.slots){
					return;
				}

				$(".continentals .check").each(function(index, value){
					if($(this).hasClass("on")){
						selectedSlots.push(parseInt($(this).attr("value")));
					}
				});

				if(selectedSlots.length == 0){
					$(".rank").removeClass("hide");
				} else if(selectedSlots.length > 0){
					$(".rank").addClass("hide");

					for(var i = 1; i <= cup.slots.length; i++){
						if(selectedSlots.includes(i)){
							$(".rank[slot"+i+"]").removeClass("hide");
						}
					}
				}
			}

			// Display trait details in the modal window

			function openTraitPopup(e){
				e.preventDefault();

				var $rank = $(e.target).closest(".rank")
				var $traits = $rank.find(".traits")

				modalWindow("Traits", $(".trait-modal"));

				$(".modal .name").first().html($rank.find(".name-container .name").first().html().replace("XL",""));

				$traits.find("div").each(function(index, value){
					$(".modal .traits").append("<div class=\""+$(this).attr("class")+"\"><div class=\"name\">"+$(this).html()+"</div><div class=\"desc\">"+$(this).attr("title")+"</div></div>");
				});
			}

			// Jump to a Pokemon entry from the similar Pokemon section

			function jumpToSimilarPokemon(e){
				e.preventDefault();

				self.jumpToPokemon($(e.target).attr("data"));
			}

			// Toggle move stats in the ranking details

			function toggleMoveStats(e){
				e.preventDefault();

				var $rank = $(e.target).closest(".rank")
				$(e.target).toggleClass("on");
				$rank.find(".moveset").toggleClass("show-stats");
			}

			// Switch to a different detail tab

			function toggleDetailTab(e){
				e.preventDefault();

				var $rank = $(e.target).closest(".rank")
				var tab = $(e.target).closest("a").attr("tab");

				// Display selected tab nav
				$rank.find(".detail-tab-nav a").removeClass("active");
				$(e.target).closest("a").addClass("active");

				// Display selected tab items
				$rank.find(".detail-tab").hide();
				$rank.find(".detail-tab[tab=\""+tab+"\"]").css("display", "flex");
			}

			// Select a Pokemon to compare an existing Pokemon's ranking data in the radar chart

			function addPokemonToCompare(e){
				var $rank = $(e.target).closest(".rank");

				modalWindow("Select Pokemon", $(".poke.single").first());

				pokeSelector = new PokeSelect($(".modal .poke"), 1);
				pokeSelector.setContext("modalrankcompare");
				pokeSelector.init(gm.data.pokemon, battle, data);
				pokeSelector.removePokemonFromOptions([{speciesId: $rank.attr("data")}]);

				$(".modal-content").append("<div class=\"center\"><div class=\"save-poke button\">Compare Pokemon</div></div>");
				$(".modal .poke-search").focus();

				// Add or save a Pokemon in the Pokemon list

				$(".modal .save-poke").on("click", function(e){

					// Make sure something's selected
					if(! pokeSelector){
						return false;
					}

					var pokemon = pokeSelector.getPokemon();

					if(! pokemon){
						return false;
					}

					var originalData = data.filter(r => r.speciesId == $rank.attr("data"))[0];
					var compareData = data.filter(r => r.speciesId == pokemon.speciesId)[0];

					drawRatingHexagon($rank, originalData, compareData);

					$rank.find(".details .ranking-compare").html("Compare: " + pokemon.speciesName);
					$rank.find(".details .ranking-compare").attr("class", "ranking-compare " + pokemon.types[0]);

					// Add comparison numbers
					for(var i = 0; i < 6; i++){
						var diff = Math.round( (originalData.scores[i] - compareData.scores[i]) * 10 ) / 10;

						if(diff >= 0){
							diff = "+" + diff;
						}

						var color = battle.getRatingColor( 500 + (25 * diff));

						$rank.find(".chart-label .comparison").eq(i).css("background", "rgb("+color[0]+","+color[1]+","+color[2]+")");
						$rank.find(".chart-label .comparison").eq(i).html(diff);
					}

					$rank.find(".chart-label .comparison").show();

					closeModalWindow();
				});
			}

			// Open format rules modal

			$("a.format-rules").click(function(e){
				e.preventDefault();

				var format = gm.getFormat(battle.getCup().name, battle.getCP());
				var $modalContent = $("<ul></ul>");

				for(var i = 0; i < format.rules.length; i++){
					$modalContent.append("<li>" + format.rules[i] + "</li>");
				}

				modalWindow(format.title + " Rules", $modalContent);

			});
		};

        return object;
    }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
        }
    };
})();
